server实现。下面列出了Java中可用的server实现：
· TSimpleServer
· TNonblockingServer
· THsHaServer
· TThreadedSelectorServer
· TThreadPoolServer
#########
TSimplerServer接受一个连接，处理连接请求，直到客户端关闭了连接，它才回去接受一个新的连接。
正因为它只在一个单独的线程中以阻塞I/O的方式完成这些工作，所以它只能服务一个客户端连接，
其他所有客户端在被服务器端接受之前都只能等待。
TSimpleServer主要用于测试目的，不要在生产环境中使用它！

########
TNonblockingServer使用非阻塞的I/O解决了TSimpleServer一个客户端阻塞其他所有客户端的问题。
它使用了java.nio.channels.Selector，通过调用select()，它使得你阻塞在多个连接上，而不是阻塞在单一的连接上。
当一或多个连接准备好被接受/读/写时，select()调用便会返回。
TNonblockingServer处理这些连接的时候，要么接受它，要么从它那读数据，要么把数据写到它那里，
然后再次调用select()来等待下一个可用的连接。通用这种方式，server可同时服务多个客户端，
而不会出现一个客户端把其他客户端全部“饿死”的情况。
然而，还有个棘手的问题：所有消息是被调用select()方法的同一个线程处理的。
假设有10个客户端，处理每条消息所需时间为100毫秒，那么，latency和吞吐量分别是多少？当一条消息被处理的时候，
其他9个客户端就等着被select，所以客户端需要等待1秒钟才能从服务器端得到回应，
吞吐量就是10个请求/秒。如果可以同时处理多条消息的话，会很不错吧？

#####
因此，THsHaServer（半同步/半异步的server）就应运而生了。它使用一个单独的线程来处理网络I/O，一个独立的worker线程池来处理消息。
这样，只要有空闲的worker线程，消息就会被立即处理，因此多条消息能被并行处理。
用上面的例子来说，现在的latency就是100毫秒，而吞吐量就是100个请求/秒。


结果正如我们想像的那样，THsHaServer能够并行处理所有请求，而TNonblockingServer只能一次处理一个请求。

######
Thrift 0.8引入了另一种server实现，即TThreadedSelectorServer。
它与THsHaServer的主要区别在于，TThreadedSelectorServer允许你用多个线程来处理网络I/O。
它维护了两个线程池，一个用来处理网络I/O，另一个用来进行请求的处理。
当网络I/O是瓶颈的时候，TThreadedSelectorServer比THsHaServer的表现要好。
为了展现它们的区别，我进行了一个测试，令其消息处理器在不做任何工作的情况下立即返回，
以衡量在不同客户端数量的情况下的平均latency和吞吐量。
对THsHaServer，我使用32个worker线程；对TThreadedSelectorServer，我使用16个worker线程和16个selector线程。